// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Soft delete fields for trial abuse prevention
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  
  // Subscription info
  subscription  Subscription?
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  qrCodes       QrCode[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String   @unique
  stripeCustomerId  String?  @unique
  stripeSubscriptionId String? @unique
  stripePriceId     String?
  stripeCurrentPeriodEnd DateTime?
  plan              String   @default("free") // free, starter, pro, business
  status            String   @default("active") // active, canceled, past_due, trialing
  trialEndsAt       DateTime? // When the trial period ends
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QrCode {
  id              String   @id @default(cuid())
  userId          String
  name            String
  type            String   // url, text, wifi, contact, email
  content         String   @db.Text
  shortUrl        String?  @unique // For analytics tracking
  settings        Json     // Custom styling, size, etc.
  isDynamic       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  scans           Scan[]
}

model Scan {
  id              String   @id @default(cuid())
  qrCodeId        String
  ipAddress       String?
  userAgent       String?
  country         String?
  city            String?
  device          String?  // mobile, desktop, tablet
  os              String?
  browser         String?
  referrer        String?
  scannedAt       DateTime @default(now())
  
  qrCode          QrCode @relation(fields: [qrCodeId], references: [id], onDelete: Cascade)
}
