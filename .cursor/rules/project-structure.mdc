---
alwaysApply: true
description: Project structure and architecture guide for QR Analytics SaaS
---

# QR Analytics SaaS - Project Structure Guide

This is a Next.js 15 SaaS application for QR code generation and analytics tracking.

## Core Architecture

- **Framework**: Next.js 15 with App Router
- **Language**: TypeScript with strict mode enabled
- **Styling**: Tailwind CSS v4
- **Database**: Prisma ORM with PostgreSQL
- **Authentication**: NextAuth.js v4
- **Payments**: Stripe integration
- **Deployment**: Docker containerized

## Directory Structure

```
src/
├── app/                    # Next.js App Router pages and layouts
│   ├── api/               # API routes for backend functionality
│   ├── auth/              # Authentication pages and callbacks
│   ├── dashboard/         # Protected dashboard pages
│   ├── demo/              # Public demo pages
│   ├── display/           # QR code display and redirect pages
│   └── r/                 # Short URL redirects
├── components/            # Reusable React components
│   ├── Dashboard.tsx      # Main dashboard component
│   ├── LandingPage.tsx    # Marketing landing page
│   ├── Navbar.tsx         # Navigation component
│   ├── QRCodeCard.tsx     # QR code display card
│   ├── QRGenerator.tsx    # QR code generation form
│   ├── QRGeneratorModal.tsx # Modal for QR generation
│   └── Toast.tsx          # Toast notification component
├── lib/                   # Utility libraries and configurations
│   ├── auth.ts            # NextAuth configuration
│   ├── location-service.ts # IP geolocation service
│   ├── prisma.ts          # Database client configuration
│   ├── qr-generator.ts    # QR code generation utilities
│   └── url-shortener.ts   # URL shortening logic
├── hooks/                 # Custom React hooks
└── middleware.ts          # Next.js middleware for auth protection
```

## Key Files

- [package.json](mdc:package.json) - Project dependencies and scripts
- [tsconfig.json](mdc:tsconfig.json) - TypeScript configuration with path mapping
- [eslint.config.mjs](mdc:eslint.config.mjs) - ESLint configuration for code quality
- [next.config.js](mdc:next.config.js) - Next.js configuration
- [prisma/schema.prisma](mdc:prisma/schema.prisma) - Database schema definition

## Path Aliases

Use the `@/*` alias for imports from the src directory:
```typescript
import { Component } from '@/components/Component'
import { auth } from '@/lib/auth'
```

## Environment Setup

The project uses environment variables for configuration. Key variables include:
- Database connection strings
- NextAuth secrets and OAuth providers
- Stripe API keys
- Email service configuration